var tmp[9]
var i

var _camera.heartbeat = 50
var camera.detect[5] = [0, 0, 0, 0, 0]
var camera.thing[60]

# Constant QUEUE = 7

var Qid[7]       # task id
var Qtime[7]     # remaining time
var QspL[7]      # motor speed L
var QspR[7]      # motor speed R
var Qpc = 0      # program counter
var Qnx = 0      # next pc

var base = 500	 # base speed
var speed = 0
var black = 300

var go.todo

var state = 0    # 0 = searching; 1 = tracking az; 2 = tracking el; 3 = gesture
var scan[3] = [0,0,0]
var tracking_kind = 0 # -1 = nest or target; 1-7 = thing; 0 = any thing
var tracking_ticks = 0
var track_turn

call math.fill(Qid, 0)
call math.fill(Qtime,0)
call math.fill(QspL,0)
call math.fill(QspR,0)

mic.threshold = 12

# Main event

sub doit
	if state == 0 then
		callsub do_stop
		return
	end
	if state == 1 then
		callsub state1_searching
	elseif state == 2 then
		callsub state2_tracking_az
	elseif state == 3 then
		callsub state3_tracking_el
	elseif state == 4 then
		callsub state4_gesture
	end

sub state1_searching
	if tracking_kind >= 3 and tracking_kind <= 11 then
		if camera.thing[tracking_kind*4] > 20 then
			state = 2
			callsub motion_reset
			tmp[0:3] = [11, 50,0,0]  # wait 500 ms
			callsub motion_add
			leds.top = [100,0,200]
			return
		end
	end
	# sweep right and left
	call math.clamp(scan[1], (2 * abs((scan[0] % 8) - 4)) - 3, -1, 1)
	scan[2] = scan[2] + (scan[1] * 60)
	tmp[0:3] = [10, 33, scan[1]*120, scan[1]*-100]  # +/- 50 degrees ramp up
	callsub motion_add
	tmp[0:3] = [11, 46, scan[1]*150, scan[1]*-150]  # +/- 50 degrees plateau
	callsub motion_add
	tmp[0:3] = [12, 33, scan[1]*120, scan[1]*-100]  # +/- 50 degrees ramp down
	callsub motion_add
	tmp[0:3] = [13, 100,0,0]  # wait 1000 ms, hope for detection
	callsub motion_add

	scan[0] = (scan[0] + 1) % 8
	leds.bottom.left = [0, 0, ((motor.right.target / scan[1]) + 1) * 100]
	leds.bottom.right = [0, 0, ((motor.left.target / scan[1]) + 1) * 100]

sub state2_tracking_az
	# see nest or target, tracking az
	if camera.thing[tracking_kind * 4] <= 20 then
		state = 0
		return
	end
	track_turn = camera.thing[tracking_kind * 4 + 2]
	if abs(camera.thing[tracking_kind * 4 + 2]) < 80 then
		state = 3
		tracking_ticks = 0
	else
		# continue turning
		track_turn = camera.thing[tracking_kind * 4 + 2] / 30
		call math.clamp(i, track_turn, -1, 1)
		tmp[0:3] = [20, track_turn, (i*137)+60, ((-i)*137)+60]
		callsub motion_add
		tmp[0:3] = [21, 70,0,0]  # wait, hope for detection
		callsub motion_add
	end
	leds.bottom.left = [200, 200,0]
	leds.bottom.right = [200, 200, 0]

sub state3_tracking_el
	# tracked az, tracking el
	tracking_ticks = tracking_ticks + 1
	if abs(camera.thing[tracking_kind * 4 + 3]) < 50 then
		state = 4
	else
		motor.left.target = 70 + (abs(camera.thing[tracking_kind * 4 + 3]) / 5)
		motor.right.target = motor.left.target
	end
	leds.bottom.left = [0, 200,0]
	leds.bottom.right = [0, 200, 0]

sub state4_gesture
	if tracking_kind == 10 or tracking_kind == 11 then
		tmp[0:3] = [30, 133, -192, -192]  # -80 mm
		callsub motion_add
		tmp[0:3] = [31, 2*180, 137, -137]  # 180 degrees
		callsub motion_add
		tmp[0:3] = [32, 100, 128, 128]  # 40 mm
		callsub motion_add
		state = 0
	else
		tmp[0:3] = [32, 125, 128, 128]  # 50 mm
		callsub motion_add
		state = 0
	end

# Inputs

onevent prox
	call math.dot(tmp[0], prox.horizontal[0:4], [1,1,1,1,1], 1)
	if tmp[0] > 500 then
		callsub do_stop
	end

onevent tap
	event.args[0] = [87]
	callsub do_command

onevent rc5
	event.args[0] = [rc5.command]
	callsub do_command

onevent command
	callsub do_command

# -- specialized
onevent camera.detect
	_camera.heartbeat = 50 + (((_camera.heartbeat % 10) + 1) % 7)
	call leds.temperature(0, 4 - abs((_camera.heartbeat % 10) % 7 - 3))
	if state > 0 then
		callsub camera_override_stop
	end

sub camera_override_stop
	if state == 1 then
		if tracking_kind >= 3 and tracking_kind <= 11 then
			if camera.thing[tracking_kind*4] > 20 then
				state = 2
			end
		elseif tracking_kind == -1 then
			for i in 10:11 do
				if camera.thing[i*4] > 20 then
					tracking_kind = i
					state = 2
				end
			end
		elseif tracking_kind == -2 then
			for i in 3:9 do
				if camera.thing[i*4] > 20 then
					tracking_kind = i
					state = 2
				end
			end
		end
		if state == 0 then 
			callsub motion_reset
			leds.top = [0,200,100]
		end
	end

# commands
sub do_command
	# -- standard
	if event.args[0] == 87 then # stop
		call sound.system(1)
		callsub do_stop
		state = 0
		go.todo = 0
	elseif event.args[0] == 53 then # go
		call sound.system(0)
		callsub do_normal
		state = 0
		if go.todo > 0 then
			go.todo = go.todo + 1
		else
			go.todo = 1
			callsub do_search_any
		end
	elseif event.args[0] == 0 then # 0 = sweep
		callsub do_sweep
	elseif event.args[0] == 80 then # forward
		callsub do_forward
	elseif event.args[0] == 81 then # backward
		callsub do_backward
	elseif event.args[0] == 86 then # right
		callsub do_right
	elseif event.args[0] == 85 then # left
		callsub do_left
	elseif event.args[0] == 16 then # plus
		callsub do_faster
	elseif event.args[0] == 17 then # minus
		callsub do_normal
	# -- specialized: add commands here
	elseif event.args[0] >= 1 and event.args[0] <= 5 then
		state = 1
		scan = [0,0,0]
		tracking_kind = event.args[0] + 2
		if tracking_kind == 6 then
			tracking_kind = 8  # substitute star for hexagon
		end
	elseif event.args[0] == 6 then # 6 = searching any thing
		state = 1
		scan = [0,0,0]
		tracking_kind = -2
	elseif event.args[0] == 7 then # 7 = searching nest or target
		state = 1
		scan = [0,0,0]
		tracking_kind = -1
	elseif event.args[0] == 8 then # 8 = state 2
		state = 2
	elseif event.args[0] == 9 then # 9 = state 4
		state = 4
	end

sub do_stop
	speed = 0
	callsub motion_reset

sub do_normal
	speed = base
	call sound.system(2)
	motor.left.target = speed
	motor.right.target = speed
	leds.bottom.left = [0, 0, 0]
	leds.bottom.right = [0, 0, 0]

sub do_slow
	speed = base
	call sound.system(2)
	if abs(motor.right.target) > 20 then
		i = (motor.left.target * 100 / motor.right.target)
		motor.right.target = (base * 200) / (i + 100)
		motor.left.target = (base * 2) / (i + 100) * i
	end

sub do_forward
	tmp[0:3] = [3, 100, 128, 128]  # 40 mm
	callsub motion_add

sub do_backward
	tmp[0:3] = [3, 100, -128,-128]  # 40 mm
	callsub motion_add

sub do_right
	tmp[0:3] = [2, 2*20, 137,-137]  # 20 degrees
	callsub motion_add

sub do_left
	tmp[0:3] = [2, 2 * 20, -137,137]  # 20 degrees
	callsub motion_add

sub do_faster
	# speed = speed * 12 / 10
	speed = speed + 1
	call math.clamp(speed, speed, 0, 2000)

sub do_sweep
	tmp[0:3] = [1,100,128,128]  # 40 mm
	callsub motion_add
	tmp[0:3] = [2,60,137,-137]  # 30 degrees
	callsub motion_add
	tmp[0:3] = [3,100,-128,-128]  # 40 mm
	callsub motion_add
	tmp[0:3] = [4,60,-137,137]  # 30 degrees
	callsub motion_add
	tmp[0:3] = [5,60,0,0]  # wait 600 ms
	callsub motion_add

sub do_retrieve
	tmp[0:3] = [6,100,128,128]  # 40 mm
	callsub motion_add
	scan = [0,0,0]
	state = 1

# -- specialized: add commands here

sub do_long_stop
	tmp[0:3] = [5,300,0,0]
	callsub motion_add
	leds.bottom.left = [200, 0, 0]
	leds.bottom.right = [200, 0, 0]
	# speed = base

sub do_short_stop
	tmp[0:3] = [5,100,0,0]
	callsub motion_add
	leds.bottom.left = [200, 0, 0]
	leds.bottom.right = [200, 0, 0]
	# speed = base

sub do_trim_right
	leds.circle[3:5] = [32,0,0]
	motor.left.target = motor.left.target + ((abs(camera.thing[i*4+2]) - 200) / 1)

sub do_trim_left
	leds.circle[3:5] = [0,0,32]
	motor.right.target = motor.right.target + ((abs(camera.thing[i*4+2]) - 200) / 1)

# Standard

# Motion queue

onevent motor # loop runs at 100 Hz
	callsub camera_override_stop

	if Qtime[Qpc] > 0 then
		# start new motion
		Qtime[Qpc] = 0 - Qtime[Qpc] # mark as current by setting negative value
	end
	if Qtime[Qpc] < 0 then
		# continue motion
		leds.top = [180,180,0]
		motor.left.target = QspL[Qpc]
		motor.right.target = QspR[Qpc]
		Qtime[Qpc] += 1
		if Qtime[Qpc] == 0 then
			Qid[Qpc] = 0
			Qpc = (Qpc+1)%7
			if Qtime[Qpc] == 0 and Qpc == Qnx then
				motor.left.target = 0
				motor.right.target = 0
			end
		end
	end
	if Qtime[Qpc] == 0 and Qpc != Qnx then
		# scan forward in the queue
		Qpc = (Qpc+1)%7
	end
	callsub run_clock
	callsub update_leds
	# if queue is empty do behavior
	if Qnx == Qpc then
		callsub doit
	end

sub update_leds
	if  speed == 0 then
		leds.top = [200,0,0]
	else
		leds.top = [0,200,0]
	end
	# leds.buttons show queue
	call math.fill(tmp,0)
	tmp[Qnx]=1
	tmp[Qpc]=4
	call leds.buttons(tmp[0],tmp[1],tmp[2],tmp[3])
	# leds.circle show speed
	call math.fill(leds.circle, 0)
	leds.circle[(abs(speed - 400) / 300) % 8] = 20

# Add a task to the queue [ Qid Qtime QspL QspR ]
sub motion_add
	if (Qnx != Qpc or (Qnx == Qpc and Qtime[Qpc] == 0)) and Qid[0]!=tmp[0] and Qid[1]!=tmp[0] and Qid[2]!=tmp[0] and Qid[3]!=tmp[0] then
		Qid[Qnx]   = tmp[0]
		Qtime[Qnx] = tmp[1]
		QspL[Qnx]  = tmp[2]
		QspR[Qnx]  = tmp[3]
		Qnx = (Qnx+1)%7
	# else silently ignore
	end

# Reset the motion queue
sub motion_reset
	motor.left.target = 0
	motor.right.target = 0
	call math.fill(Qid,0)
	call math.fill(Qtime,0)
	call math.fill(QspL,0)
	call math.fill(QspR,0)
	call math.fill(Qpc,0)
	call math.fill(Qnx,0)

# Animate the clock face based on Qtime[Qpc]
sub run_clock
	call math.fill(leds.circle, 0)
	if Qtime[Qpc] > 0 and motor.left.target == 0 and motor.right.target == 0 then
		leds.circle[abs(Qtime[Qpc]/25) % 8] = 30
	end
