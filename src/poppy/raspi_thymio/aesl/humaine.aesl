var tmp[9]
var i

var _camera.heartbeat = 50
var camera.detect[5] = [0, 0, 0, 0, 0]
var camera.thing[60]

# Constant QUEUE = 7

var Qid[7]       # task id
var Qtime[7]     # remaining time
var QspL[7]      # motor speed L
var QspR[7]      # motor speed R
var Qpc = 0      # program counter
var Qnx = 0      # next pc

var base = 500	 # base speed
var speed = 0
var black = 300
var lost = 0
var lost_turn[2] = [200, -350]
var lost_phase

var state = 0    # 0 = follow track

call math.fill(Qid, 0)
call math.fill(Qtime,0)
call math.fill(QspL,0)
call math.fill(QspR,0)

mic.threshold = 12

# Main event

sub doit
	# -- specialized: add default behavior here
	callsub camera_detect

# Inputs

onevent tap
	event.args[0] = [87]
	callsub do_command

onevent rc5
	event.args[0] = [rc5.command]
	callsub do_command

onevent command
	callsub do_command

# -- specialized
onevent camera.detect
	_camera.heartbeat = 50 + (((_camera.heartbeat % 10) + 1) % 7)
	call leds.temperature(0, 4 - abs((_camera.heartbeat % 10) % 7 - 3))
	if state > 0 then
		callsub camera_detect
	end

sub camera_detect
	# -- specialized: add detection here
	if speed > 0 then
		if camera.thing[14*4] > 50 and speed < 2000 then
			# straightaway
			motor.right.target = motor.left.target
			callsub do_faster
		elseif camera.thing[12*4] + camera.thing[13*4] > 50 then
			# turn ahead
			callsub do_slow
		elseif camera.thing[2*4] > 50 and camera.thing[2*4 + 3] < 500 and camera.thing[2*4 + 3] < 150 then
			# stop sign
			callsub do_long_stop
		elseif camera.thing[1*4] > 50 and camera.thing[1*4 + 3] < 500 and camera.thing[1*4 + 3] < 150 then
			# zebra sign
			callsub do_short_stop
		elseif camera.thing[0*4] > 50 and camera.thing[0*4 + 3] < 250 and abs(camera.thing[i*4 + 2]) < 300 then
			# parking sign
			callsub do_stop
		else
			leds.circle[5:6] = [0,0]
		end
	end

# commands
sub do_command
	# -- standard
	if event.args[0] == 87 then # stop
		call sound.system(1)
		callsub do_stop
		state = 0
	elseif event.args[0] == 53 then # go
		call sound.system(0)
		callsub do_normal
		state = 0
	elseif event.args[0] == 0 then # 0 = sweep
		callsub do_sweep
	elseif event.args[0] == 80 then # forward
		callsub do_forward
	elseif event.args[0] == 81 then # backward
		callsub do_backward
	elseif event.args[0] == 86 then # right
		callsub do_right
	elseif event.args[0] == 85 then # left
		callsub do_left
	elseif event.args[0] == 16 then # plus
		callsub do_faster
	elseif event.args[0] == 17 then # minus
		callsub do_normal
	elseif event.args[0] == 7 then # 7 = stop sign
		callsub do_long_stop
	elseif event.args[0] == 9 then # 9 = zebra
		callsub do_short_stop
	end

sub do_stop
	speed = 0
	callsub motion_reset

sub do_normal
	speed = base
	call sound.system(2)
	motor.left.target = speed
	motor.right.target = speed
	leds.bottom.left = [0, 0, 0]
	leds.bottom.right = [0, 0, 0]
	lost = 0

sub do_slow
	speed = base
	call sound.system(2)
	i = (motor.left.target * 100 / motor.right.target)
	motor.right.target = (base * 200) / (i + 100)
	motor.left.target = (base * 2) / (i + 100) * i

sub do_forward
	tmp[0:3] = [3, 100, 128, 128]  # 40 mm
	callsub motion_add

sub do_backward
	tmp[0:3] = [3, 100, -128,-128]  # 40 mm
	callsub motion_add

sub do_right
	tmp[0:3] = [2, 2*20, 137,-137]  # 20 degrees
	callsub motion_add

sub do_left
	tmp[0:3] = [2, 2 * 20, -137,137]  # 20 degrees
	callsub motion_add

sub do_faster
	# speed = speed * 12 / 10
	speed = speed + 1
	call math.clamp(speed, speed, 0, 2000)

sub do_sweep
	tmp[0:3] = [1,100,128,128]  # 40 mm
	callsub motion_add
	tmp[0:3] = [2,60,137,-137]  # 30 degrees
	callsub motion_add
	tmp[0:3] = [3,100,-128,-128]  # 40 mm
	callsub motion_add
	tmp[0:3] = [4,60,-137,137]  # 30 degrees
	callsub motion_add
	tmp[0:3] = [5,60,0,0]  # wait 600 ms
	callsub motion_add

# -- specialized: add commands here

sub do_long_stop
	tmp[0:3] = [5,300,0,0]
	callsub motion_add
	leds.bottom.left = [200, 0, 0]
	leds.bottom.right = [200, 0, 0]

sub do_short_stop
	tmp[0:3] = [5,100,0,0]
	callsub motion_add
	leds.bottom.left = [200, 0, 0]
	leds.bottom.right = [200, 0, 0]

# Standard

# Motion queue

onevent motor # loop runs at 100 Hz
	if Qtime[Qpc] > 0 then
		# start new motion
		Qtime[Qpc] = 0 - Qtime[Qpc] # mark as current by setting negative value
	end
	if Qtime[Qpc] < 0 then
		# continue motion
		leds.top = [180,180,0]
		motor.left.target = QspL[Qpc]
		motor.right.target = QspR[Qpc]
		Qtime[Qpc] += 1
		if Qtime[Qpc] == 0 then
			Qid[Qpc] = 0
			Qpc = (Qpc+1)%7
			if Qtime[Qpc] == 0 and Qpc == Qnx then
				motor.left.target = 0
				motor.right.target = 0
			end
		end
	end
	if Qtime[Qpc] == 0 and Qpc != Qnx then
		# scan forward in the queue
		Qpc = (Qpc+1)%7
	end
	callsub run_clock
	callsub update_leds
	# if queue is empty do behavior
	if Qnx == Qpc then
		callsub doit
	end

sub update_leds
	if  speed == 0 then
		leds.top = [200,0,0]
	else
		leds.top = [0,200,0]
	end
	# leds.buttons show queue
	call math.fill(tmp,0)
	tmp[Qnx]=1
	tmp[Qpc]=4
	call leds.buttons(tmp[0],tmp[1],tmp[2],tmp[3])
	# leds.circle show speed
	call math.fill(leds.circle, 0)
	leds.circle[(abs(speed - 400) / 300) % 8] = 20

# Add a task to the queue [ Qid Qtime QspL QspR ]
sub motion_add
	if (Qnx != Qpc or (Qnx == Qpc and Qtime[Qpc] == 0)) and Qid[0]!=tmp[0] and Qid[1]!=tmp[0] and Qid[2]!=tmp[0] and Qid[3]!=tmp[0] then
		Qid[Qnx]   = tmp[0]
		Qtime[Qnx] = tmp[1]
		QspL[Qnx]  = tmp[2]
		QspR[Qnx]  = tmp[3]
		Qnx = (Qnx+1)%7
	# else silently ignore
	end

# Reset the motion queue
sub motion_reset
	motor.left.target = 0
	motor.right.target = 0
	call math.fill(Qid,0)
	call math.fill(Qtime,0)
	call math.fill(QspL,0)
	call math.fill(QspR,0)
	call math.fill(Qpc,0)
	call math.fill(Qnx,0)

# Animate the clock face based on Qtime[Qpc]
sub run_clock
	call math.fill(leds.circle, 0)
	if Qtime[Qpc] > 0 and motor.left.target == 0 and motor.right.target == 0 then
		leds.circle[abs(Qtime[Qpc]/25) % 8] = 30
	end
